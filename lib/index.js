// Generated by CoffeeScript 1.8.0
var Promise, buildFactoryFromSchema, faker, mongooseFactory, unionized;

unionized = require('unionized/src/unionized');

faker = require('faker');

Promise = require('bluebird');

buildFactoryFromSchema = function(schema, mongoose) {
  var DocumentArray, ObjectId, definition, embedArray, promises, _ref;
  _ref = mongoose.SchemaTypes, ObjectId = _ref.ObjectId, DocumentArray = _ref.DocumentArray;
  definition = this;
  embedArray = Promise.promisify(definition.embedArray, definition);
  promises = [];
  schema.eachPath(function(pathName, schemaType) {
    var _ref1;
    switch (false) {
      case !((schemaType.defaultValue != null) && typeof schemaType.defaultValue !== 'function'):
        return definition.set(pathName, schemaType.defaultValue);
      case !(((_ref1 = schemaType.enumValues) != null ? _ref1.length : void 0) > 0):
        return definition.set(pathName, faker.random.array_element(schemaType.enumValues));
      case !(schemaType instanceof ObjectId):
        return definition.set(pathName, new mongoose.Types.ObjectId());
      case !(schemaType instanceof mongoose.SchemaTypes.Boolean):
        return definition.set(pathName, faker.random.array_element([true, false]));
      case !(schemaType instanceof mongoose.SchemaTypes.Date):
        return definition.set(pathName, faker.Date.between(new Date('2013-01-01'), new Date('2014-01-01')));
      case !(schemaType instanceof mongoose.SchemaTypes.String):
        return definition.set(pathName, faker.Lorem.words().join(' '));
      case !(schemaType instanceof mongoose.SchemaTypes.Number):
        return definition.set(pathName, faker.random.number(100));
      case !(schemaType instanceof DocumentArray):
        return promises.push(embedArray(pathName, 2, unionized.define(function(callback) {
          return buildFactoryFromSchema.call(this, schemaType.schema, mongoose).nodeify(callback);
        })));
    }
  });
  return Promise.all(promises);
};

module.exports = mongooseFactory = function(Model) {
  return unionized.define(Model, function(callback) {
    var mongoose;
    mongoose = Model.db.base;
    return buildFactoryFromSchema.call(this, Model.schema, mongoose).nodeify(callback);
  });
};
