mongooseFactory = require '../src'
{expect} = require 'chai'
mongoose = require 'mongoose'

describe 'mongoose-factory', ->

  describe 'a factory generated by a mongoose model', ->
    Model = mongoose.model 'Kitten', mongoose.Schema
      name: { type: String, required: true }
      cutenessPercentile: { type: Number, required: true }
      personality: { type: String, required: true, enum: ['friendly', 'fierce', 'antisocial', 'changeable'] }
      eyeColor: { type: String, default: 'yellow', required: true }
      isHunter: { type: Boolean, required: true }
      paws: [
        nickname: String
        clawCount: Number
      ]
    {factory} = {}

    beforeEach ->
      factory = mongooseFactory Model

    it 'has the standard factory methods', ->
      expect(factory).to.respondTo 'create'
      expect(factory).to.respondTo 'build'
      expect(factory).to.respondTo 'json'
      expect(factory).to.respondTo 'define'

    describe 'an instance generated by the factory with no arguments', ->
      {instance} = {}

      beforeEach (done) ->
        factory.json (error, kitten) ->
          instance = kitten
          done()

      it 'has an _id', ->
        expect(instance._id).to.be.an.instanceOf mongoose.Types.ObjectId

      it 'can generate a string', ->
        expect(instance.name).to.be.a 'string'

      it 'can generate a number', ->
        expect(instance.cutenessPercentile).to.be.a 'number'

      it 'can generate within an enum', ->
        expect(instance.personality in ['friendly', 'fierce', 'antisocial', 'changeable']).to.be.ok

      it 'can generate a boolean', ->
        expect(instance.isHunter).to.be.a 'boolean'

      it 'will use provided defaults', ->
        expect(instance.eyeColor).to.equal 'yellow'

      it 'can generate an array', ->
        expect(instance.paws).to.be.an.instanceOf Array
