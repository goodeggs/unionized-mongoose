mongooseFactory = require '../src'
{expect} = require 'chai'
mongoose = require 'mongoose'
moment = require 'moment'

describe 'random field generation', ->

  Model = mongoose.model 'Kitten', mongoose.Schema
    name: { type: String, required: true }
    cutenessPercentile: { type: Number, required: true }
    personality: { type: String, required: true, enum: ['friendly', 'fierce', 'antisocial', 'changeable'] }
    eyeColor: { type: String, default: 'yellow', required: true }
    isHunter: { type: Boolean, required: true }
    bornAt: { type: Date, required: true }
    description: String
    paws: [
      nickname: String
      clawCount: Number
    ]
    meta:
      owner:
        name: { type: String, required: true }
        age: Number
    breed:
      type: String
      factory: -> 'Tabby'
      required: true

  beforeEach ->
    @factory = mongooseFactory Model
    @instance = null

  describe 'an instance generated by the factory with no inputs', ->
    beforeEach (done) ->
      @factory.json (error, @instance) => done error

    it 'has an _id', ->
      expect(@instance._id).to.be.an.instanceOf mongoose.Types.ObjectId

    it 'can generate a string', ->
      expect(@instance.name).to.be.a 'string'

    it 'can generate a number', ->
      expect(@instance.cutenessPercentile).to.be.a 'number'

    it 'can generate within an enum', ->
      expect(@instance.personality in ['friendly', 'fierce', 'antisocial', 'changeable']).to.be.ok

    it 'can generate a boolean', ->
      expect(@instance.isHunter).to.be.a 'boolean'

    it 'can generate a date (default in 2013)', ->
      born = moment(@instance.bornAt)
      expect(born.isAfter  '2012-12-31').to.be.ok
      expect(born.isBefore '2014-01-01').to.be.ok

    it 'will use provided defaults', ->
      expect(@instance.eyeColor).to.equal 'yellow'

    it 'can generate an array', ->
      expect(@instance.paws).to.be.an.instanceOf Array

    it 'will ignore non-required attributes', ->
      expect(@instance.description).to.be.undefined

    it 'generates deeply-nested attributes', ->
      expect(@instance?.meta?.owner?.name).to.have.length.of.at.least 1
      expect(@instance?.meta?.owner?.age).not.to.be.ok

    it 'uses `factory` callbacks', ->
      expect(@instance).to.have.property 'breed', 'Tabby'

  describe 'an instance generated with inputs', ->
    beforeEach (done) ->
      @factory.json {
        name: 'John Doe'
        meta:
          owner:
            age: 30
        'meta.owner.name': 'Joe Shmoe'
      }, (error, @instance) => done error

    it 'respects top-level inputs', ->
      expect(@instance).to.have.property 'name', 'John Doe'

    it 'respects deeply-nested object inputs', ->
      expect(@instance?.meta?.owner?.age).to.equal 30

    it 'respects deeply-nested dot-pathed arguments', ->
      expect(@instance?.meta?.owner?.name).to.equal 'Joe Shmoe'

