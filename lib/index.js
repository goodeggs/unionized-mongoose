// Generated by CoffeeScript 1.8.0
var Promise, buildFactoryFromSchema, faker, mongoose, mongooseFactory, unionized;

mongoose = require('mongoose');

unionized = require('unionized/src/unionized');

faker = require('faker');

Promise = require('bluebird');

buildFactoryFromSchema = function(schema) {
  var definition, embedArray, promises;
  definition = this;
  embedArray = Promise.promisify(definition.embedArray, definition);
  promises = [];
  schema.eachPath(function(pathName, schemaType) {
    switch (false) {
      case !(schemaType instanceof mongoose.SchemaTypes.String && pathName === 'name'):
        return definition.set(pathName, faker.Name.findName());
      case !(schemaType instanceof mongoose.SchemaTypes.String):
        return definition.set(pathName, faker.Lorem.words().join(' '));
      case !(schemaType instanceof mongoose.SchemaTypes.Number):
        return definition.set(pathName, faker.random.number(100));
      case !(schemaType instanceof mongoose.SchemaTypes.DocumentArray):
        return promises.push(embedArray(pathName, 2, unionized.define(function(callback) {
          return buildFactoryFromSchema.call(this, schemaType.schema).nodeify(callback);
        })));
    }
  });
  return Promise.all(promises);
};

module.exports = mongooseFactory = function(model) {
  return unionized.define(model, function(callback) {
    return buildFactoryFromSchema.call(this, model.schema).nodeify(callback);
  });
};
